
function problem1
    train_folder = 'dataset_updated/train';
    test_folder = 'dataset_updated/test';
    
    filters = generateFilters();
    train_files = dir([train_folder,filesep,'*.raw']);
    test_files = dir([test_folder,filesep,'*.raw']);
    train_images = zeros(128, 128, length(train_files));
    feature_vectors = zeros(length(train_files), 25);
    for i=1:length(train_files)
        img = single(readraw([train_files(i).folder,filesep,train_files(i).name], 128, 128, 1));
        img = img - mean(img,'all');
        for j=1:25
            response = convolve5x5Wrapper(img, filters(:,:,j));
            avgEn = calcAverageEnergy(response);
            feature_vectors(i,j) = avgEn;
        end
        % Attempt to normalize based on L5L5 response
        %feature_vectors(i,:)=(feature_vectors(i,:))./feature_vectors(i,1);
        
    end
    labels = [1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4];
    discPower = calcDiscriminantPower(feature_vectors, labels, 4);
    figure;
    plot(discPower);
    title("Discriminant Power before PCA");
    disp(discPower);
    
    reduced_feature_vectors_coeff = pca(feature_vectors,"NumComponents",3);
    reduced_feat_vec = matmul(feature_vectors, reduced_feature_vectors_coeff);
    reducedDiscPower= calcDiscriminantPower(reduced_feat_vec, labels, 4);
    figure;
    plot(reducedDiscPower);
    title("Discriminant Power after PCA");
    disp(reducedDiscPower);

    % [36 x 3]  x y z 1-9
    %figure
    %hold on;
    colors = zeros(36, 3);
    for i=1:length(train_files)
        %disp([train_files(i).folder,filesep,train_files(i).name]);
        if labels(i)==1
            colors(i,:) = [1 0 0];
        elseif labels(i)==2
            colors(i,:) = [0 1 0];
        elseif labels(i)==3
            colors(i,:) = [0 0 1];
        else
            colors(i,:) = [0 0 0];
        end
    end
    figure;
    scatter3(reduced_feat_vec(:,1),reduced_feat_vec(:,2), reduced_feat_vec(:,3), 60, colors);
    title("Train set after PCA");
    
    test_feature_vectors = zeros(length(test_files), 25);
    % blanket - 1 brick -2 grass - 3 rice - 4
    test_labels = [3 2 1 3 1 1 2 4 3 2 4 4];
    for i=1:length(test_files)
        img = single(readraw([test_files(i).folder,filesep,test_files(i).name], 128, 128, 1));
        img = img - mean(img,'all');
        for j=1:25
            response = convolve5x5Wrapper(img, filters(:,:,j));
            avgEn = calcAverageEnergy(response);
            test_feature_vectors(i,j) = avgEn;
        end
        %test_feature_vectors(i,:)=(test_feature_vectors(i,:))./test_feature_vectors(i,1); 

    end
    reduced_test_feat_vec = matmul(test_feature_vectors, reduced_feature_vectors_coeff);
    figure;
    scatter3(reduced_test_feat_vec(:,1),reduced_test_feat_vec(:,2), reduced_test_feat_vec(:,3));
    title("Test set after PCA");
    
    runMahNN(feature_vectors, test_feature_vectors, test_files, labels, test_labels);
    runKmeans(feature_vectors, test_feature_vectors, test_files, labels, test_labels);
    runRF(feature_vectors, test_feature_vectors, test_files, labels, test_labels);
    runSVM(feature_vectors, test_feature_vectors, test_files, labels, test_labels);
    %Experimental approach
    runEucNN(feature_vectors, test_feature_vectors, test_files, labels, test_labels);
end
function class_name = getClassName(id)
    if id==1
        class_name = 'BLANKET';
    elseif id==2
        class_name = 'BRICK';
    elseif id==3
        class_name = 'GRASS';
    elseif id==4
        class_name = 'RICE';
    end
end
function drawPreds(test_files, test_labels, test_preds, title_lbl)
    % blanket - 1 brick -2 grass - 3 rice - 4
    images =[];
    grid_init = zeros(length(test_files), 128, 128, 3);
    for i=1:length(test_files)
        img = single(readraw([test_files(i).folder,filesep,test_files(i).name], 128, 128, 1));
        if test_labels(i)==test_preds(i)
            img = insertText(img, [1, 1], [getClassName(test_labels(i)),filesep,getClassName(test_preds(i))],"TextColor","white", "BoxColor","white");
        else
            img = insertText(img, [1, 1], [getClassName(test_labels(i)),filesep,getClassName(test_preds(i))],"TextColor","white", "BoxColor","white");
        end
        grid_init(i,:,:,:) = img;
    end
    form_grid = [squeeze(grid_init(1,:,:,:)), squeeze(grid_init(2,:,:,:)), squeeze(grid_init(3,:,:,:));
        squeeze(grid_init(4,:,:,:)), squeeze(grid_init(5,:,:,:)), squeeze(grid_init(6,:,:,:));
        squeeze(grid_init(7,:,:,:)), squeeze(grid_init(8,:,:,:)), squeeze(grid_init(9,:,:,:));
        squeeze(grid_init(10,:,:,:)), squeeze(grid_init(11,:,:,:)), squeeze(grid_init(12,:,:,:))];
    figure;
    imagesc(uint8(form_grid));
    title(title_lbl);
    
end
function runEucNN(train_feats, test_feats, test_files, train_labels, test_labels)
    for i=1:length(train_feats)
        train_feats(i,:)=(train_feats(i,:))./train_feats(i,1); %-mean(feature_vectors(i,:)))/std(feature_vectors(i,:));
        
    end
    train_feats(:,1) = [];
    for i=1:length(test_files)
        test_feats(i,:)=(test_feats(i,:))./test_feats(i,1); %-mean(feature_vectors(i,:)))/std(feature_vectors(i,:));    
    end
    test_feats(:,1) = [];
    reduced_feature_vectors_coeff = pca(train_feats,"NumComponents",3);
    reduced_feat_vec = matmul(train_feats, reduced_feature_vectors_coeff);
    reduced_test_feat_vec = matmul(test_feats, reduced_feature_vectors_coeff);
    num_corrects = 0;
    preds = [];
    for i=1:length(test_files)
        min_dist = 1e10;
        class_pred = -1;
        dist = computeEucDist(reduced_feat_vec(1:9,:), reduced_test_feat_vec(i));
        if dist < min_dist
            min_dist = dist;
            class_pred = 1;
        end
        dist = computeEucDist(reduced_feat_vec(10:18,:), reduced_test_feat_vec(i));
        if dist < min_dist
            min_dist = dist;
            class_pred = 2;
        end
        dist = computeEucDist(reduced_feat_vec(19:27,:), reduced_test_feat_vec(i));
        if dist < min_dist
            min_dist = dist;
            class_pred = 3;
        end
        dist = computeEucDist(reduced_feat_vec(28:36,:), reduced_test_feat_vec(i));
        if dist < min_dist
            min_dist = dist;
            class_pred = 4;
        end
        preds = [preds class_pred];
        if class_pred == test_labels(i)
            num_corrects = num_corrects + 1;
        end
    end
    drawPreds(test_files, test_labels, preds, 'EucNN');
    disp(['Accuracy [EuclideanNN]:', num2str(num_corrects/length(test_files))]);
end
function runMahNN(train_feats, test_feats, test_files, train_labels, test_labels)
    reduced_feature_vectors_coeff = pca(train_feats,"NumComponents",3);
    reduced_feat_vec = matmul(train_feats, reduced_feature_vectors_coeff);
    reduced_test_feat_vec = matmul(test_feats, reduced_feature_vectors_coeff);
    num_corrects = 0;
    preds=[];
    for i=1:length(test_files)
        min_dist = 1e10;
        class_pred = -1;
        dist = computeMahDist(reduced_feat_vec(1:9,:), reduced_test_feat_vec(i));
        if dist < min_dist
            min_dist = dist;
            class_pred = 1;
        end
        dist = computeMahDist(reduced_feat_vec(10:18,:), reduced_test_feat_vec(i));
        if dist < min_dist
            min_dist = dist;
            class_pred = 2;
        end
        dist = computeMahDist(reduced_feat_vec(19:27,:), reduced_test_feat_vec(i));
        if dist < min_dist
            min_dist = dist;
            class_pred = 3;
        end
        dist = computeMahDist(reduced_feat_vec(28:36,:), reduced_test_feat_vec(i));
        if dist < min_dist
            min_dist = dist;
            class_pred = 4;
        end
        preds = [preds class_pred];
        if class_pred == test_labels(i)
            num_corrects = num_corrects + 1;
        end
    end
    drawPreds(test_files, test_labels, preds, 'MahNN');
    disp(['Accuracy [MahNN]:', num2str(num_corrects/length(test_files))]);
end
function runKmeans(train_feats, test_feats, test_files, train_labels, test_labels)
    %for i=1:length(train_feats)
    %    train_feats(i,:)=(train_feats(i,:))./train_feats(i,1);
        
    %end
    %train_feats(:,1) = [];
    
    reduced_feature_vectors_coeff = pca(train_feats,"NumComponents",3);
    reduced_feat_vec = matmul(train_feats, reduced_feature_vectors_coeff);
    reduced_test_feat_vec = matmul(test_feats, reduced_feature_vectors_coeff);
    
    [idx, centroids] = kmeans(reduced_feat_vec, 4);
    
    centroid_map = [0 0 0 0];
    min_dist = euclideanDistance(centroids(1,:), reduced_feat_vec(1));
    min_idx = 1;    
    for i=2:36
        dist = euclideanDistance(centroids(1,:), reduced_feat_vec(i));
        if dist<min_dist
            min_dist = dist;
            min_idx = i;
        end
    end
    centroid_map(1) = train_labels(min_idx);
    
    min_dist = 1e6;
    min_idx = -1;    
    for i=1:36
        if any(centroid_map(:)==train_labels(i))
            continue;
        end
        dist = euclideanDistance(centroids(2,:), reduced_feat_vec(i));
        if dist<min_dist
            min_dist = dist;
            min_idx = i;
        end
    end
    centroid_map(2) = train_labels(min_idx);
    min_dist = 1e10;
    min_idx = -1;    
    for i=1:36
        if any(centroid_map(:)==train_labels(i))
            continue;
        end
        dist = euclideanDistance(centroids(3,:), reduced_feat_vec(i));
        if dist<min_dist
            min_dist = dist;
            min_idx = i;
        end
    end
    centroid_map(3) = train_labels(min_idx);
    centroid_map(centroid_map==0) =4;
    
    %reassign centroid numbers to class ids 
    
    num_corrects = 0;
    preds=[];
    for i=1:length(test_files)
        min_dist = 1e6;
        class_pred = -1;
        dist = euclideanDistance(centroids(1,:), reduced_test_feat_vec(i));
        %disp(dist);
        if dist < min_dist
            min_dist = dist;
            class_pred = 1;
        end
        dist = euclideanDistance(centroids(2,:), reduced_test_feat_vec(i));
        %disp(dist);
        if dist < min_dist
            min_dist = dist;
            class_pred = 2;
        end
        dist = euclideanDistance(centroids(3,:), reduced_test_feat_vec(i));
        %disp(dist);
        if dist < min_dist
            min_dist = dist;
            class_pred = 3;
        end
        dist = euclideanDistance(centroids(4,:), reduced_test_feat_vec(i));
        if dist < min_dist
            min_dist = dist;
            class_pred = 4;
        end
        class_pred = centroid_map(class_pred);
        preds = [preds class_pred];
        if class_pred == test_labels(i)
            num_corrects = num_corrects + 1;
        end
    end
    drawPreds(test_files, test_labels, preds, 'KMeans 3D');
    disp(['Accuracy [KMeans 3-D]:', num2str(num_corrects/length(test_files))]);
    
    [idx, centroids] = kmeans(train_feats, 4);
    centroid_map = [0 0 0 0];
    min_dist = euclideanDistance(centroids(1,:), reduced_feat_vec(1));
    min_idx = 1;    
    for i=2:36
        dist = euclideanDistance(centroids(1,:), reduced_feat_vec(i));
        if dist<min_dist
            min_dist = dist;
            min_idx = i;
        end
    end
    centroid_map(1) = train_labels(min_idx);
    
    min_dist = 1e10;
    min_idx = -1;    
    for i=1:36
        if any(centroid_map(:)==train_labels(i))
            continue;
        end
        dist = euclideanDistance(centroids(2,:), reduced_feat_vec(i));
        if dist<min_dist
            min_dist = dist;
            min_idx = i;
        end
    end
    centroid_map(2) = train_labels(min_idx);
    min_dist = 1e6;
    min_idx = -1;    
    for i=1:36
        if any(centroid_map(:)==train_labels(i))
            continue;
        end
        dist = euclideanDistance(centroids(3,:), reduced_feat_vec(i));
        if dist<min_dist
            min_dist = dist;
            min_idx = i;
        end
    end
    centroid_map(3) = train_labels(min_idx);
    centroid_map(centroid_map==0) =4;
    num_corrects = 0;
    preds =[];
    for i=1:length(test_files)
        min_dist = 1e10;
        class_pred = -1;
        dist = euclideanDistance(centroids(1,:), test_feats(i));
        if dist < min_dist
            min_dist = dist;
            class_pred = 1;
        end
        dist = euclideanDistance(centroids(2,:), test_feats(i));
        if dist < min_dist
            min_dist = dist;
            class_pred = 2;
        end
        dist = euclideanDistance(centroids(3,:), test_feats(i));
        if dist < min_dist
            min_dist = dist;
            class_pred = 3;
        end
        dist = euclideanDistance(centroids(4,:), test_feats(i));
        if dist < min_dist
            min_dist = dist;
            class_pred = 4;
        end
        class_pred = centroid_map(class_pred);
        preds = [preds class_pred];
        if class_pred == test_labels(i)
            num_corrects = num_corrects + 1;
        end
    end
    drawPreds(test_files, test_labels, preds, 'KMeans 25D');
    disp(['Accuracy [KMeans 25-D]:', num2str(num_corrects/length(test_files))]);
end
function runRF(train_feats, test_feats, test_files, train_labels, test_labels)
    reduced_feature_vectors_coeff = pca(train_feats,"NumComponents",3);
    reduced_feat_vec = matmul(train_feats, reduced_feature_vectors_coeff);
    reduced_test_feat_vec = matmul(test_feats, reduced_feature_vectors_coeff);
    
    Mdl = TreeBagger(100,reduced_feat_vec,train_labels,'OOBPrediction','On',...
    'Method','classification');
    [y_pred] = predict(Mdl, reduced_test_feat_vec);
    num_corrects = 0;
    y_pred = str2num((cell2mat(y_pred)));
    preds = [];
    for i=1:length(test_files)
        preds = [preds double(y_pred(i))];
        if(double(y_pred(i)) == double(test_labels(i)))
            num_corrects = num_corrects + 1;
        end
    end
    drawPreds(test_files, test_labels, preds, 'Random Forest');
    disp(['Accuracy [Random Forest]:', num2str(num_corrects/length(test_files))]);
end
function runSVM(train_feats, test_feats, test_files, train_labels, test_labels)
    reduced_feature_vectors_coeff = pca(train_feats,"NumComponents",3);
    reduced_feat_vec = matmul(train_feats, reduced_feature_vectors_coeff);
    reduced_test_feat_vec = matmul(test_feats, reduced_feature_vectors_coeff);
    
    Mdl = fitcecoc(reduced_feat_vec, train_labels);
    [y_pred] = predict(Mdl, reduced_test_feat_vec);
    num_corrects = 0;
    y_pred = y_pred';
    preds =[];
    for i=1:length(test_files)
        preds = [preds double(y_pred(i))];
        if(double(y_pred(i)) == double(test_labels(i)))
            num_corrects = num_corrects + 1;
        end
    end
    drawPreds(test_files, test_labels, preds, 'SVM');
    disp(['Accuracy [SVM]:', num2str(num_corrects/length(test_files))]);
end
function matrix = computeCovMatrix(train_vec)
    [n_samples, feat_size] = size(train_vec);
    mean_vec = mean(train_vec, 1);
    matrix = zeros(feat_size, feat_size);
    for i=1:n_samples
        l_vec = train_vec(i,:) - mean_vec;
        mat = matmul(l_vec', l_vec);
        matrix = matrix + mat;
    end
    matrix = matrix/(n_samples-1);
end
function distance = computeMahDist(train_vec, test_vec)
    S = computeCovMatrix(train_vec);
    mean_vec = mean(train_vec,1);
    distance = sqrt(matmul(matmul((test_vec-mean_vec),inv(S)),(test_vec-mean_vec)'));
end
function distance = euclideanDistance(x,y)
    distance = sqrt(sum((x - y).^2,'all'));
end
function distance = computeEucDist(train_vec, test_vec)
    min_dist = 10000;
    for i=1:length(train_vec)
        dist = sqrt(sum((train_vec(i, :) - test_vec).^2,'all'));
        if dist<min_dist
            min_dist = dist;
        end
    end
    distance = min_dist;
end
function discPower = calcDiscriminantPower(feature_vectors, labels, n_classes)
    [n_samples, feat_size] = size(feature_vectors);
    per_feat_avg = mean(feature_vectors, 1);
    per_class_feat_avg = [mean(feature_vectors(1:9,:),1); mean(feature_vectors(10:18,:),1); mean(feature_vectors(19:27,:),1); mean(feature_vectors(28:36,:),1)];
    intra_class_ss = zeros(1,feat_size);
    inter_class_ss = zeros(1,feat_size);
    
    for i=1:feat_size
        for j=1:n_samples
            intra_class_ss(1,i) = intra_class_ss(1,i) + (feature_vectors(j,i) - per_class_feat_avg(labels(j),i))^2;
            inter_class_ss(1,i) = inter_class_ss(1,i) + (per_feat_avg(1,i) - per_class_feat_avg(labels(j),i))^2;
        end
    end
    discPower = intra_class_ss./inter_class_ss;
end
function avgEn = calcAverageEnergy(response)
    [h w] = size(response);
    tot = 0;
    for i=1:h
        for j=1:w
            tot = tot + abs(response(i,j));
        end
    end
    avgEn = tot/(h*w);
end
function response = convolve5x5Wrapper(image, filter)
    filterResponse = zeros(128, 128);
    paddedImage = zeros(132, 132);
    for i=3:130
        for j=3:130
           paddedImage(i,j) = image(i-2,j-2);
        end
    end
    for i=3:130
        for j=3:130
            filterResponse(i-2,j-2) = convolve5x5(paddedImage, filter, i,j);
        end
    end
    response = filterResponse;
end
function response = convolve5x5(paddedImage, filter, i, j)
    tot = 0;
    tot = tot + paddedImage(i-2,j-2)*filter(1,1);
    tot = tot + paddedImage(i-2,j-1)*filter(1,2);
    tot = tot + paddedImage(i-2,j)*filter(1,3);
    tot = tot + paddedImage(i-2,j+1)*filter(1,4);
    tot = tot + paddedImage(i-2,j+2)*filter(1,5);
    
    tot = tot + paddedImage(i-1,j-2)*filter(2,1);
    tot = tot + paddedImage(i-1,j-1)*filter(2,2);
    tot = tot + paddedImage(i-1,j)*filter(2,3);
    tot = tot + paddedImage(i-1,j+1)*filter(2,4);
    tot = tot + paddedImage(i-1,j+2)*filter(2,5);
    
    tot = tot + paddedImage(i,j-2)*filter(3,1);
    tot = tot + paddedImage(i,j-1)*filter(3,2);
    tot = tot + paddedImage(i,j)*filter(3,3);
    tot = tot + paddedImage(i,j+1)*filter(3,4);
    tot = tot + paddedImage(i,j+2)*filter(3,5);
    
    tot = tot + paddedImage(i+1,j-2)*filter(4,1);
    tot = tot + paddedImage(i+1,j-1)*filter(4,2);
    tot = tot + paddedImage(i+1,j)*filter(4,3);
    tot = tot + paddedImage(i+1,j+1)*filter(4,4);
    tot = tot + paddedImage(i+1,j+2)*filter(4,5);
    
    tot = tot + paddedImage(i+2,j-2)*filter(5,1);
    tot = tot + paddedImage(i+2,j-1)*filter(5,2);
    tot = tot + paddedImage(i+2,j)*filter(5,3);
    tot = tot + paddedImage(i+2,j+1)*filter(5,4);
    tot = tot + paddedImage(i+2,j+2)*filter(5,5);
    
    response = tot;
end
function filters = generateFilters()
    filters1d = [1 4 6 4 1; -1 -2 0 2 1; -1 0 2 0 -1; -1 2 0 -2 1; 1 -4 6 -4 1];
    l5 = filters1d(1,:);
    e5 = filters1d(2,:);
    s5 = filters1d(3,:);
    w5 = filters1d(4,:);
    r5 = filters1d(5,:);
    filters = zeros(5,5,25);
    filter_num = 1;
    for i=1:5
        for j = 1:5
            l_filter = filters1d(i,:);
            r_filter = filters1d(j,:);
            for t_i=1:5
                for t_j=1:5
                    filters(t_i,t_j,filter_num) = l_filter(t_i)*r_filter(t_j);
                end
            end
            filter_num = filter_num+1;
        end
    end
    
end
function res = matmul(a,b)
    [m n] = size(a);
    [p q] = size(b);
    res = zeros(m,q);
    if(n~=p)
        disp("Incorrect dimensions!");
    end
    for i=1:m
        for j=1:n
            for k=1:q
                res(i,k) = res(i,k) + a(i,j) * b(j,k);
            end
        end
    end
end
%
%Adityan Jothi
%USC ID 8162222801
%jothi@usc.edu
%
function problem2()
    src_image = imread('composite_updated.png');
    [h w] = size(src_image);
    
    window_size = 11;
    filters = generateFilters();
    feature_space = zeros(h, w, 25);
    
    src_image = (src_image - mean(src_image,'all'));
    for j=1:25
        response = convolve5x5Wrapper(src_image, filters(:,:,j));
        avgEn = calcAverageEnergyWindowed(response, window_size);
        feature_vectors(:,:,j) = avgEn;
    end
    %for j=1:25
    %    feature_vectors(:,:,j) = feature_vectors(:,:,j)./feature_vectors(:,:,1);
    %end
    %feature_vectors(:,:,1) =[];
    flattened_feature_vectors = zeros(h*w, 25);
    idx = 1;
    for i=1:h
        for j =1:w
            flattened_feature_vectors(idx, :) = feature_vectors(i,j,:);
            idx = idx+1;
        end
    end
    [idx, centroids] = kmeans(flattened_feature_vectors, 5);
    segmentation_map = zeros(h,w);
    jdx=1;
    colors = [0, 63, 127, 191, 255];
    for i=1:h
        for j=1:w
            segmentation_map(i,j) = colors(idx(jdx));
            jdx = jdx+1;
        end
    end
    red_fv_coeff = pca(flattened_feature_vectors,'NumComponents', 3);
    red_feat_vec = matmul(flattened_feature_vectors, red_fv_coeff);
    [idx, centroids] = kmeans(red_feat_vec, 5);
    figure;
    image(segmentation_map);
    title('25-D segmentation');
    figure;
    image(enhanceMap(segmentation_map,colors));
    title('25-D segmentation after postprocessing');
    
    red_segmentation_map = zeros(h,w);
    jdx=1;
    colors = [0, 63, 127, 191, 255];
    for i=1:h
        for j=1:w
            %closestClass = findClosestClass(centroids, flattened_feature_vectors(idx, :))
            red_segmentation_map(i,j) = colors(idx(jdx));
            %idx = idx +1;
            %if closestClass~=1
            %    disp(colors(closestClass));
                %disp([i j]);
                %end
                jdx = jdx+1;
        end
    end
    %segmentation_map(120:122, :) = 255;
    figure;
    image(red_segmentation_map);
    title('3D segmentation');
    figure;
    image(enhanceMap(red_segmentation_map,colors));
    title('3D segmentation after postprocessing');
end
function segMap = enhanceMap(segmentationMap, intensityLevels)
    [h,w] = size(segmentationMap);
    segMap = segmentationMap;
    prev_map = segmentationMap;
    iter_count = 1;
   
    while 1
        segMap = denoiseImage(segMap);
        segMap = dilateImage(segMap, intensityLevels);
        segMap = erodeImage(segMap, intensityLevels);
        if isequal(prev_map, segMap) || iter_count>0
            break;
        end
        iter_count = iter_count + 1;
        prev_map = segMap;
    end
    
end
function out = denoiseImage(img)
    [h, w] = size(img);
    paddedImage = zeros(h+2, w+2);
    out = zeros(h,w);
    for i=2:h
        for j=2:w
            paddedImage(i,j)=img(i-1,j-1);
        end
    end
    for i=2:h
        for j=2:w
            if paddedImage(i-1,j-1)==0 && paddedImage(i-1,j)==0 && paddedImage(i-1,j+1)==0 && paddedImage(i,j-1)==0 && paddedImage(i,j+1)==0 && paddedImage(i+1,j-1)==0 && paddedImage(i+1,j)==0 && paddedImage(i+1,j+1)==0 && paddedImage(i,j)~=0
                out(i-1,j-1) = 0;
            else
                out(i-1,j-1) = img(i-1,j-1);
            end
            
        end
    end
end
function out = erodeImage(img, intensityLevels)
    [h, w] = size(img);
    erodeKernel1 = [0 intensityLevels(1) 0; intensityLevels(1) intensityLevels(1) intensityLevels(1); 0 intensityLevels(1) 0];
    erodeKernel2 = [0 intensityLevels(2) 0; intensityLevels(2) intensityLevels(2) intensityLevels(2); 0 intensityLevels(2) 0];
    erodeKernel3 = [0 intensityLevels(3) 0; intensityLevels(3) intensityLevels(3) intensityLevels(3); 0 intensityLevels(3) 0];
    erodeKernel4 = [0 intensityLevels(4) 0; intensityLevels(4) intensityLevels(4) intensityLevels(4); 0 intensityLevels(4) 0];
    erodeKernel5 = [0 intensityLevels(5) 0; intensityLevels(5) intensityLevels(5) intensityLevels(5); 0 intensityLevels(5) 0];
    paddedImage = zeros(h+2, w+2);
    out = zeros(h,w);
    for i=2:h
        for j=2:w
            paddedImage(i,j)=img(i-1,j-1);
        end
    end
    for i=2:h
        for j=2:w
            if (paddedImage(i-1,j)==intensityLevels(1) && paddedImage(i,j-1)==intensityLevels(1) && paddedImage(i,j+1)==intensityLevels(1) && paddedImage(i+1,j)==intensityLevels(1)) && paddedImage(i,j)==intensityLevels(1)
                out(i-1,j-1) = intensityLevels(1);
            elseif (paddedImage(i-1,j)==intensityLevels(2) && paddedImage(i,j-1)==intensityLevels(2) && paddedImage(i,j+1)==intensityLevels(2) && paddedImage(i+1,j)==intensityLevels(2)) && paddedImage(i,j)==intensityLevels(2)
                out(i-1,j-1) = intensityLevels(2);
            elseif (paddedImage(i-1,j)==intensityLevels(3) && paddedImage(i,j-1)==intensityLevels(3) && paddedImage(i,j+1)==intensityLevels(3) && paddedImage(i+1,j)==intensityLevels(3)) && paddedImage(i,j)==intensityLevels(3)
                out(i-1,j-1) = intensityLevels(3);
            elseif (paddedImage(i-1,j)==intensityLevels(4) && paddedImage(i,j-1)==intensityLevels(4) && paddedImage(i,j+1)==intensityLevels(4) && paddedImage(i+1,j)==intensityLevels(4)) && paddedImage(i,j)==intensityLevels(4)
                out(i-1,j-1) = intensityLevels(4);
            elseif (paddedImage(i-1,j)==intensityLevels(5) && paddedImage(i,j-1)==intensityLevels(5) && paddedImage(i,j+1)==intensityLevels(5) && paddedImage(i+1,j)==intensityLevels(5)) && paddedImage(i,j)==intensityLevels(5)
                out(i-1,j-1) = intensityLevels(5);
            else
                out(i-1, j-1) = 0;
            end
        end
    end
end
function out = dilateImage(img, intensityLevels)
    [h, w] = size(img);
    paddedImage = zeros(h+2, w+2);
    out = zeros(h,w);
    for i=2:h
        for j=2:w
            paddedImage(i,j)=img(i-1,j-1);
        end
    end
    for i=2:h
        for j=2:w
            if(paddedImage(i-1,j)==intensityLevels(1) || paddedImage(i,j-1)==intensityLevels(1) || paddedImage(i,j+1)==intensityLevels(1) || paddedImage(i+1,j)==intensityLevels(1)) && paddedImage(i,j)==intensityLevels(1)
                out(i-1,j-1) = intensityLevels(1);
            elseif(paddedImage(i-1,j)==intensityLevels(2) || paddedImage(i,j-1)==intensityLevels(2) || paddedImage(i,j+1)==intensityLevels(2) || paddedImage(i+1,j)==intensityLevels(2)) && paddedImage(i,j)==intensityLevels(2)
                out(i-1,j-1) = intensityLevels(2);
            elseif(paddedImage(i-1,j)==intensityLevels(3) || paddedImage(i,j-1)==intensityLevels(3) || paddedImage(i,j+1)==intensityLevels(3) || paddedImage(i+1,j)==intensityLevels(3)) && paddedImage(i,j)==intensityLevels(3)
                out(i-1,j-1) = intensityLevels(3);
            elseif(paddedImage(i-1,j)==intensityLevels(4) || paddedImage(i,j-1)==intensityLevels(4) || paddedImage(i,j+1)==intensityLevels(4) || paddedImage(i+1,j)==intensityLevels(4)) && paddedImage(i,j)==intensityLevels(4)
                out(i-1,j-1) = intensityLevels(4);
            elseif(paddedImage(i-1,j)==intensityLevels(5) || paddedImage(i,j-1)==intensityLevels(5) || paddedImage(i,j+1)==intensityLevels(5) || paddedImage(i+1,j)==intensityLevels(5)) && paddedImage(i,j)==intensityLevels(5)
                out(i-1,j-1) = intensityLevels(5);
            else
                out(i-1, j-1) = 0;
            end
        end
    end
end

function closestClass = findClosestClass(centroids, feat_vec)
    min_dist = 1e11;
    class_pred = -1;
    disp(size(feat_vec));
    disp(size(centroids(1,:)));
    dist = euclideanDistance(centroids(1,:), feat_vec);
    if dist<min_dist
        min_dist = dist;
        class_pred = 1;
    end
    dist = euclideanDistance(centroids(2,:), feat_vec);
    if dist<min_dist
        min_dist = dist;
        class_pred = 2;
    end
    dist = euclideanDistance(centroids(3,:), feat_vec);
    if dist<min_dist
        min_dist = dist;
        class_pred = 3;
    end
    dist = euclideanDistance(centroids(4,:), feat_vec);
    if dist<min_dist
        min_dist = dist;
        class_pred = 4;
    end
    dist = euclideanDistance(centroids(5,:), feat_vec);
    if dist<min_dist
        min_dist = dist;
        class_pred = 5;
    end
    closestClass = class_pred;
end
function distance = euclideanDistance(x,y)
    distance = sqrt(sum((x - y).^2,'all'));
end
function res = matmul(a,b)
    [m n] = size(a);
    [p q] = size(b);
    res = zeros(m,q);
    if(n~=p)
        disp("Incorrect dimensions!");
    end
    for i=1:m
        for j=1:n
            for k=1:q
                res(i,k) = res(i,k) + a(i,j) * b(j,k);
            end
        end
    end
end

function filters = generateFilters()
    filters1d = [1 4 6 4 1; -1 -2 0 2 1; -1 0 2 0 -1; -1 2 0 -2 1; 1 -4 6 -4 1];
    l5 = filters1d(1,:);
    e5 = filters1d(2,:);
    s5 = filters1d(3,:);
    w5 = filters1d(4,:);
    r5 = filters1d(5,:);
    filters = zeros(5,5,25);
    filter_num = 1;
    for i=1:5
        for j = 1:5
            l_filter = filters1d(i,:);
            r_filter = filters1d(j,:);
            for t_i=1:5
                for t_j=1:5
                    filters(t_i,t_j,filter_num) = l_filter(t_i)*r_filter(t_j);
                end
            end
            filter_num = filter_num+1;
        end
    end
    
end

function response = convolve5x5(paddedImage, filter, i, j)
    tot = 0;
    tot = tot + paddedImage(i-2,j-2)*filter(1,1);
    tot = tot + paddedImage(i-2,j-1)*filter(1,2);
    tot = tot + paddedImage(i-2,j)*filter(1,3);
    tot = tot + paddedImage(i-2,j+1)*filter(1,4);
    tot = tot + paddedImage(i-2,j+2)*filter(1,5);
    
    tot = tot + paddedImage(i-1,j-2)*filter(2,1);
    tot = tot + paddedImage(i-1,j-1)*filter(2,2);
    tot = tot + paddedImage(i-1,j)*filter(2,3);
    tot = tot + paddedImage(i-1,j+1)*filter(2,4);
    tot = tot + paddedImage(i-1,j+2)*filter(2,5);
    
    tot = tot + paddedImage(i,j-2)*filter(3,1);
    tot = tot + paddedImage(i,j-1)*filter(3,2);
    tot = tot + paddedImage(i,j)*filter(3,3);
    tot = tot + paddedImage(i,j+1)*filter(3,4);
    tot = tot + paddedImage(i,j+2)*filter(3,5);
    
    tot = tot + paddedImage(i+1,j-2)*filter(4,1);
    tot = tot + paddedImage(i+1,j-1)*filter(4,2);
    tot = tot + paddedImage(i+1,j)*filter(4,3);
    tot = tot + paddedImage(i+1,j+1)*filter(4,4);
    tot = tot + paddedImage(i+1,j+2)*filter(4,5);
    
    tot = tot + paddedImage(i+2,j-2)*filter(5,1);
    tot = tot + paddedImage(i+2,j-1)*filter(5,2);
    tot = tot + paddedImage(i+2,j)*filter(5,3);
    tot = tot + paddedImage(i+2,j+1)*filter(5,4);
    tot = tot + paddedImage(i+2,j+2)*filter(5,5);
    
    response = tot;
end
function response = convolve5x5Wrapper(image, filter)
    [h w] = size(image);
    filterResponse = zeros(h, w);
    paddedImage = zeros(h+4, w+4);
    for i=3:h+2
        for j=3:w+2
           paddedImage(i,j) = image(i-2,j-2);
        end
    end
    for i=3:h+2
        for j=3:w+2
            filterResponse(i-2,j-2) = convolve5x5(paddedImage, filter, i,j);
        end
    end
    response = filterResponse;
end
function avgEn = calcAverageEnergyWindowed(response, window_size)
    [h w] = size(response);
    offset = floor(window_size/2);
    avgEn = zeros(h,w);
    paddedImage = zeros(h+offset*2, w+offset*2);
    for i=(1+offset):(h+offset)
        for j=(1+offset):(w+offset)
            paddedImage(i,j) = response(i-offset,j-offset);
        end
    end
    for i=(1+offset):(h+offset)
        for j=(1+offset):(w+offset)
            avgEn(i-offset,j-offset) = calcAvgEn(paddedImage(i-offset:i+offset, j-offset:j+offset));
        end
    end
end
function avgEn = calcAvgEn(window)
    tot = 0;
    [h, w] = size(window);
    for i=1:h
        for j=1:w
           tot = tot + abs(window(i,j)); 
        end
    end
    avgEn = tot/(h*w);
end
%
%Adityan Jothi
%USC ID 8162222801
%jothi@usc.edu
%

function problem3()
    dog_1_rgb = (imread("Dog_1.png"));
    dog_2_rgb = (imread("Dog_2.png"));
    dog_3_rgb = (imread("Dog_3.png"));
    cat_rgb= (imread("Cat.png"));
   
    dog_1 = rgb2gray(dog_1_rgb);
    dog_2 = rgb2gray(dog_2_rgb);
    dog_3 = rgb2gray(dog_3_rgb);
    cat = rgb2gray(cat_rgb);
   
    [dog_1_fts, dog_1_dsc] = vl_sift(single(dog_1));
    [dog_2_fts, dog_2_dsc] = vl_sift(single(dog_2));
    [dog_3_fts, dog_3_dsc] = vl_sift(single(dog_3));
    [cat_fts, cat_dsc] = vl_sift(single(cat));
    
    matchLSS(dog_3_rgb, dog_1_rgb, dog_3_fts, dog_1_fts, dog_3_dsc, dog_1_dsc);
    matchImages(dog_3_rgb, dog_1_rgb, dog_3_fts, dog_1_fts, dog_3_dsc, dog_1_dsc, 1.7, "Dog_1 & Dog_3");
    matchImages(dog_3_rgb, dog_2_rgb, dog_3_fts, dog_2_fts, dog_3_dsc, dog_2_dsc, 1.8, "Dog_3 & Dog_2");
    matchImages(dog_3_rgb, cat_rgb, dog_3_fts, cat_fts, dog_3_dsc, cat_dsc,1.75, "Dog_3 & Cat");
    matchImages(dog_1_rgb, cat_rgb, dog_1_fts, cat_fts, dog_1_dsc, cat_dsc,1.6, "Dog_1 & Cat");
    
    doBagOfWords(["Dog_1.png", "Dog_2.png", "Dog_3.png", "Cat.png"], dog_3);
end
function matchImages(img_left, img_right, img_left_fts, img_right_fts, img_left_dsc, img_right_dsc, threshold, title_lbl)
    [matches, scores] = vl_ubcmatch(img_left_dsc, img_right_dsc, threshold);
    [t num_matches]=size(matches);
    selected_fts_left = [];
    selected_fts_right = [];
    
    for i=1:num_matches 
        selected_fts_left = [selected_fts_left img_left_fts(:,matches(1,i))];
        selected_fts_right = [selected_fts_right img_right_fts(:,matches(2,i))];
    end
    figure;
    imagesc([img_left, img_right]);
    title(title_lbl);
    selected_fts_right(1,:) = selected_fts_right(1,:) + 640;
    vl_plotframe(selected_fts_left);
    vl_plotframe(selected_fts_right);
    for i=1:num_matches
        line([selected_fts_left(1,i) selected_fts_right(1,i)], [[selected_fts_left(2,i) selected_fts_right(2,i)]]);
    end
end
function matchLSS(img_left, img_right, img_left_fts, img_right_fts, img_left_dsc, img_right_dsc)
    [ft_shape, num_points]=size(img_left_fts);
    max_scale = img_left_fts(3,1);
    max_scale_idx = 1;
    for i=2:num_points
        if img_left_fts(3,i)>max_scale
            max_scale = img_left_fts(3,i);
            max_scale_idx = i;
        end
    end
    disp(['Orientation L:', num2str(img_left_fts(4,max_scale_idx))]);
    [dsc_shape, num_points_r] = size(img_right_dsc);
    min_dst = 1e6;
    
    match_idx = -1;
    distances = zeros(num_points_r);
    for i=1:num_points_r;
        dist = euclideanDistance(img_left_dsc(:, max_scale_idx), img_right_dsc(:,i));
        distances(i) = dist;
        if(dist<min_dst)
            min_dst = dist;
            match_idx = i;
        end
    end
    disp(['Orientation R:', num2str(img_right_fts(4,match_idx))]);
    figure;
    imshow(img_left);
    title("Left Image (Dog_3)");
    h1 = vl_plotframe(img_left_fts(:,max_scale_idx));
    h3 = vl_plotsiftdescriptor(img_left_dsc(:,max_scale_idx), img_left_fts(:,max_scale_idx));
    
    set(h1,'color','k','linewidth',3) ;
    set(h3,'color','g','linewidth',3) ;
    %match_idx = 876;
    figure;
    image(uint8(img_right));
    title("Right Image (Dog_1)");
    h1 = vl_plotframe(img_right_fts(:,match_idx));
    h3 = vl_plotsiftdescriptor(img_right_dsc(:,match_idx), img_right_fts(:,match_idx));
    
    set(h1,'color','k','linewidth',3) ;
    set(h3,'color','g','linewidth',3) ;
    figure;
    plot(1:num_points_r, distances);
    title('Distance to descriptors (NNSearch)');
    
end
function [similarity] = doBagOfWords(images, search_image)
    num_files = length(images);
    dscs = [];
    for i=1:num_files
        [fts, dsc] = vl_sift(single(rgb2gray(imread(images(i)))));
        dsc = single(dsc');
        dsc_coeff = pca(single(dsc),"NumComponents",20);
        dsc_ft_vec = matmul(single(dsc), dsc_coeff);
        dscs = [dscs; dsc_ft_vec];
    end
    [idx, centroids] = kmeans(dscs, 8);
    histogramArr = zeros(4,8);
    for i=1:num_files
        [fts, dsc] = vl_sift(single(rgb2gray(imread(images(i)))));
        dsc = single(dsc');
        dsc_coeff = pca(single(dsc),"NumComponents",20);
        dsc_ft_vec = matmul(single(dsc), dsc_coeff);
        [num_feats, ft_shape] = size(dsc_ft_vec);
        for j=1:num_feats
            k = findClosestCentroid(centroids, dsc_ft_vec(j,:));
            histogramArr(i,k) = histogramArr(i,k)+1;
        end
    end
    
    disp(histogramArr);
    figure;
    bar(histogramArr(1,:)');
    title('BoW Histogram Dog_1');
    figure;
    bar(histogramArr(2,:)');
    title('BoW Histogram Dog_2');
    figure;
    bar(histogramArr(3,:)');
    title('BoW Histogram Dog_3');
    figure;
    bar(histogramArr(4,:)');
    title('BoW Histogram Cat');
    scores = [compareHistogram(histogramArr(1,:), histogramArr(3,:)),
        compareHistogram(histogramArr(2,:), histogramArr(3,:)),
        compareHistogram(histogramArr(4,:), histogramArr(3,:))];
    figure();
    bar(scores);
    title('Similarity Scores for Dog_3');
    xlabel(['Dog_1', 'Dog_2', 'Cat']);
    disp(compareHistogram(histogramArr(1,:), histogramArr(3,:)));
    disp(compareHistogram(histogramArr(2,:), histogramArr(3,:)));
    disp(compareHistogram(histogramArr(4,:), histogramArr(3,:)));
end
function histValue = compareHistogram(l_vec, r_vec)
    numer = 0;
    denom = 0;
    for i=1:8;
        min_ = min(l_vec(i), r_vec(i));
        max_ = max(l_vec(i), r_vec(i));
        numer = numer+min_;
        denom = denom+max_;
    end
    histValue = numer/denom;
end
function idx = findClosestCentroid(centroids, feat)
    
    min_dist = euclideanDistance(centroids(1,:), feat);
    min_idx = 1;
    distances = [min_dist];
    for i=2:8
        dist = euclideanDistance(centroids(i,:), feat);
        if dist<min_dist
            min_dist = dist;
            min_idx = i;
        end
        distances = [distances dist];
    end
    idx = min_idx;
end
function distance = euclideanDistance(x,y)
    distance = sqrt(sum((x - y).^2,'all'));
end